/*
 * generated by Xtext 2.11.0
 */
grammar InternalBinDsl;

options {
	superClass=AbstractInternalContentAssistParser;
}

@lexer::header {
package de.unimuenster.pi.ide.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package de.unimuenster.pi.ide.contentassist.antlr.internal;

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.DFA;
import de.unimuenster.pi.services.BinDslGrammarAccess;

}
@parser::members {
	private BinDslGrammarAccess grammarAccess;

	public void setGrammarAccess(BinDslGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}

	@Override
	protected Grammar getGrammar() {
		return grammarAccess.getGrammar();
	}

	@Override
	protected String getValueForTokenName(String tokenName) {
		return tokenName;
	}
}

// Entry rule entryRuleN
entryRuleN
:
{ before(grammarAccess.getNRule()); }
	 ruleN
{ after(grammarAccess.getNRule()); } 
	 EOF 
;

// Rule N
ruleN 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getNAccess().getGroup()); }
		(rule__N__Group__0)
		{ after(grammarAccess.getNAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleL
entryRuleL
:
{ before(grammarAccess.getLRule()); }
	 ruleL
{ after(grammarAccess.getLRule()); } 
	 EOF 
;

// Rule L
ruleL 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		(
			{ before(grammarAccess.getLAccess().getVAssignment()); }
			(rule__L__VAssignment)
			{ after(grammarAccess.getLAccess().getVAssignment()); }
		)
		(
			{ before(grammarAccess.getLAccess().getVAssignment()); }
			(rule__L__VAssignment)*
			{ after(grammarAccess.getLAccess().getVAssignment()); }
		)
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleB
entryRuleB
:
{ before(grammarAccess.getBRule()); }
	 ruleB
{ after(grammarAccess.getBRule()); } 
	 EOF 
;

// Rule B
ruleB 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getBAccess().getAlternatives()); }
		(rule__B__Alternatives)
		{ after(grammarAccess.getBAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__B__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getBAccess().getBAssignment_0()); }
		(rule__B__BAssignment_0)
		{ after(grammarAccess.getBAccess().getBAssignment_0()); }
	)
	|
	(
		{ before(grammarAccess.getBAccess().getBAssignment_1()); }
		(rule__B__BAssignment_1)
		{ after(grammarAccess.getBAccess().getBAssignment_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__N__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__N__Group__0__Impl
	rule__N__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__N__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getNAccess().getV1Assignment_0()); }
	(rule__N__V1Assignment_0)
	{ after(grammarAccess.getNAccess().getV1Assignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__N__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__N__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__N__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getNAccess().getGroup_1()); }
	(rule__N__Group_1__0)?
	{ after(grammarAccess.getNAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__N__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__N__Group_1__0__Impl
	rule__N__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__N__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getNAccess().getCondAssignment_1_0()); }
	(rule__N__CondAssignment_1_0)
	{ after(grammarAccess.getNAccess().getCondAssignment_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__N__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__N__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__N__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getNAccess().getV2Assignment_1_1()); }
	(rule__N__V2Assignment_1_1)
	{ after(grammarAccess.getNAccess().getV2Assignment_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__N__V1Assignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getNAccess().getV1LParserRuleCall_0_0()); }
		ruleL
		{ after(grammarAccess.getNAccess().getV1LParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__N__CondAssignment_1_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getNAccess().getCondFullStopKeyword_1_0_0()); }
		(
			{ before(grammarAccess.getNAccess().getCondFullStopKeyword_1_0_0()); }
			'.'
			{ after(grammarAccess.getNAccess().getCondFullStopKeyword_1_0_0()); }
		)
		{ after(grammarAccess.getNAccess().getCondFullStopKeyword_1_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__N__V2Assignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getNAccess().getV2LParserRuleCall_1_1_0()); }
		ruleL
		{ after(grammarAccess.getNAccess().getV2LParserRuleCall_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__L__VAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getLAccess().getVBParserRuleCall_0()); }
		ruleB
		{ after(grammarAccess.getLAccess().getVBParserRuleCall_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__B__BAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getBAccess().getB0Keyword_0_0()); }
		(
			{ before(grammarAccess.getBAccess().getB0Keyword_0_0()); }
			'0'
			{ after(grammarAccess.getBAccess().getB0Keyword_0_0()); }
		)
		{ after(grammarAccess.getBAccess().getB0Keyword_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__B__BAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getBAccess().getB1Keyword_1_0()); }
		(
			{ before(grammarAccess.getBAccess().getB1Keyword_1_0()); }
			'1'
			{ after(grammarAccess.getBAccess().getB1Keyword_1_0()); }
		)
		{ after(grammarAccess.getBAccess().getB1Keyword_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
