/*
 * generated by Xtext 2.11.0
 */
grammar InternalBinDsl;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package de.unimuenster.pi.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package de.unimuenster.pi.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import de.unimuenster.pi.services.BinDslGrammarAccess;

}

@parser::members {

 	private BinDslGrammarAccess grammarAccess;

    public InternalBinDslParser(TokenStream input, BinDslGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "N";
   	}

   	@Override
   	protected BinDslGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleN
entryRuleN returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getNRule()); }
	iv_ruleN=ruleN
	{ $current=$iv_ruleN.current; }
	EOF;

// Rule N
ruleN returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getNAccess().getV1LParserRuleCall_0_0());
				}
				lv_v1_0_0=ruleL
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getNRule());
					}
					set(
						$current,
						"v1",
						lv_v1_0_0,
						"de.unimuenster.pi.BinDsl.L");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				(
					lv_cond_1_0='.'
					{
						newLeafNode(lv_cond_1_0, grammarAccess.getNAccess().getCondFullStopKeyword_1_0_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getNRule());
						}
						setWithLastConsumed($current, "cond", true, ".");
					}
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getNAccess().getV2LParserRuleCall_1_1_0());
					}
					lv_v2_2_0=ruleL
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getNRule());
						}
						set(
							$current,
							"v2",
							lv_v2_2_0,
							"de.unimuenster.pi.BinDsl.L");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
	)
;

// Entry rule entryRuleL
entryRuleL returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getLRule()); }
	iv_ruleL=ruleL
	{ $current=$iv_ruleL.current; }
	EOF;

// Rule L
ruleL returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				newCompositeNode(grammarAccess.getLAccess().getVBParserRuleCall_0());
			}
			lv_v_0_0=ruleB
			{
				if ($current==null) {
					$current = createModelElementForParent(grammarAccess.getLRule());
				}
				add(
					$current,
					"v",
					lv_v_0_0,
					"de.unimuenster.pi.BinDsl.B");
				afterParserOrEnumRuleCall();
			}
		)
	)+
;

// Entry rule entryRuleB
entryRuleB returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getBRule()); }
	iv_ruleB=ruleB
	{ $current=$iv_ruleB.current; }
	EOF;

// Rule B
ruleB returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_b_0_0='0'
				{
					newLeafNode(lv_b_0_0, grammarAccess.getBAccess().getB0Keyword_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getBRule());
					}
					setWithLastConsumed($current, "b", lv_b_0_0, "0");
				}
			)
		)
		    |
		(
			(
				lv_b_1_0='1'
				{
					newLeafNode(lv_b_1_0, grammarAccess.getBAccess().getB1Keyword_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getBRule());
					}
					setWithLastConsumed($current, "b", lv_b_1_0, "1");
				}
			)
		)
	)
;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
